자바의 장점
 1. 다양한 분야에서 활발히 사용
 2. 20년 동안 프로그래밍 언어 상위권 위치
 3. 배우기 쉽고 풍부한 학습자료
 4. 모던 프로그래밍 언어(객체지향 + 함수형)


자바의 특징
 - 배우기 쉬운 객체지향 언어 = 프로그래밍 언어 + 객체지향 개념(객체지향 언어로 c++, java, python, js 등이 있음)
 - 자동 메모리 관리(Garbage Collector, GC)
   => 실행순서 : 참조되지 않은 객체들을 탐색 후 삭제 → 삭제된 객체의 메모리 반환 → 힙 메모리 재사용
 - 멀티쓰레드 지원 => 하나의 프로그램에서 동시에 여러 작업을 가능하게 함
 - 풍부한 라이브러리로 쉽게 개발가능
 - *** 운영체제에 독립적 => JVM

자바 가상 머신(JVM)
 - 자바 프로그램이 실행되는 가상 컴퓨터(VM)
 - 자바 애플리케이션이 실행되기 위해서는 반드시 JVM이 필요
 - 위의 특성으로 OS에 따라 프로그램 변경 없이 실행 가능(단, JVM은 OS에 종속적이기 때무에 실행 가능한 JVM이 필요)

// ctrl+alt+shift+down 행단위 복사
// alt+shift+a 컬럼편집모드(토글)

변수의 명명규칙
 - 대소문자가 구분되며 길이에 제한이 없다. (True, true 다륾)
 - 예약어를 사용해서는 안된다. (true, char 등..)
 - 숫자로 시작해서는 안된다. (up10 가능, 7down 불가능)
 - 특수문자는 '_'와 '$'만을 허용한다. (str_a 등..)
 
권장 규칙
 - 클래스 이름의 첫글자는 항상 대문자로
 - 여러 단어로 이루어진 이름은 단어의 첫 글자를 대문자로 (lastIndexOf 등..)
 - 상수의 이름은 모두 대문자로 하며. 여러 단어로 이어질 경우 '_' 로 구분 ( MAX_NUMBER )
 
변수의 타입
 - 기본형(primitive type) : 논리형(boolean), 문자형(char), 정수형(byte, short, int, long), 실수형(float, double) ==> 실제 값(data)을 저장
 - 참조형(reference type) : 객체의 주소를 저장, 8개의 기본형을 제외한 나머지 타입
 
==============================================
        1byte |   2byte |   4byte |   8byte |
논리형  boolean
문자형            char
정수형   byte     short      int       long
실수형                      float     double
===============================================
ex) int는 4byte, 32bit 이므로 저장 가능 값의 범위는 -2^31 ~ 2^31 - 1 이다.
* float 의 정밀도는 7, double의 정밀도는 15이다.
=> 정밀도 : 10진수로 오차없이 저장할 수 있는 자릿수. 높을수록 발생할 수 있는 오차의 범위 줄어듦.

변수(variable) : 하나의 값을 저장하기 위한 공간
상수(constant) : 값을 한번만 저장할 수 있는 공간
리터럴(literal) : 그 자체로 값을 의미하는 것

int year(변수) : 2014(리터럴);
final int MAX_VALUE(상수) : 100(리터럴);

** 상수 쓰는 이유 : 리터럴에 '의미있는 이름'을 붙여서 코드의 이해와 수정을 쉽게 만든다.

변수와 리터럴의 타입 불일치
 1. 범위가 변수(그릇) > 리터럴(물건) 인 경우 OK
  - ex) int i = 'A';(가능) // int(4byte) > char(2byte)
    ex2) float f = 3.14;(불가능) // float(4byte) < double(8byte)

문자 리터럴 : 문자 하나를 감싼 것 / 반드시 '' 안에 하나의 문자가 있어야 함.
문자열 리터럴 : 두 문자 이상을 감싼 것 / ""  안에 아무런 문자도 넣지 않는 것을 허용.
* String 특별히 허용
 - String name = new String("Java"); // String 객체 생성
 - String name = "Ja" + "va"; // name은 "Java"

* 문자열 + (any type) => 문자열 + (문자열) -> 문자열
    (any type) + 문자열 ==> (문자열) + 문자열 -> 문자열
    ex) 7 + 7 + "" ==> 14 + "" ==> "14" + "" ==> "14"
        "" + 7 + 7 ==> "7" + 7 ==> "7" + "7" ==> "77"

* 오버플로우(overflow) : 타입이 표현할 수 있는 값의 범위를 넘어서는 것
 - 최대값 + 1 => 최소값
 - 최소값 - 1 => 최대값
ex) 4bit 10진수의 최대값은 9999 인데, 여기에 +1을 하면 9999 + 1 = 10000 으로 맨 앞의 1이 버려져 0000(최소값)이 된다.
    여기서 1을 빼버리면 0에서 1을 뺄 수 없어 앞에 저장되지 않은 1이 있다고 가정하여 10000 - 1 = 9999 이 된다.
ex2) 부호있는 정수는 부호비트(맨앞의 2진수)가 0에서 1이 될 때 오버플로우 발생

실수형의 저장방식
 - S(부호, Sign bit) + E(지수, Exponent) + M(가수, Mantissa)로 이루어짐
 - S : 0이면 양수 1이면 음수
 - E : 부호있는 정수
 - M : 실제 값을 저장하는 부분
 - float의 경우 S/E/M = 1/8/23 = 32bit(4byte) / double의 경우 S/E/M = 1/11/52 = 64(8byte)
 
 
*** 형변환 : 변수 또는 상수의 타입을 다른 타입으로 변환하는 것
 - 형변환 방식 : (타입)피연산자
   ex) double d = 85.4; 
       int score = (int)d; // double 타입 d를 int타입으로 형변환
*** 형변환 연산자는 그저 값을 형변환하고 결과를 반환할 뿐임 => ** 피연산자 변수 d의 값은 형변환 후에도 아무 변화가 없다. **
- 자동 형변환의 규칙 : 기존의 값을 최대한 보존할 수 있는 타입으로 자동 형변환한다.
  1. boolean을 제외한 나머지 7개의 기본형은 서로 형변환 가능
  2. 기본형과 참조형은 서로 형변환할 수 없다.
  3. 표현범위가 넓은 쪽은 자동형변환 가능 ( 예: 정수형 -> 실수형 자동 형변환 가능, int에서 long으로 자동 형변환 가능, long에서 float로 자동 형변환 가능 )

// 자바의정석 2장 끝


// 자바의정석 3장 
